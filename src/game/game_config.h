#pragma once

#include "core/xstring.h"
#include "core/settings_vars.h"
#include "core/typename.h"
#include "core/custom_span.hpp"
#include <array>

namespace game_features {
    struct game_feature {
        const xstring name;
        const setting_variant defaultv;

        game_feature(const xstring &n, setting_variant def);
        bool to_bool() const;
        inline bool operator!() const { return !to_bool(); }
        void set(bool value);
    };

    extern game_feature gameplay_fix_immigration;
    extern game_feature gameplay_fix_100y_ghosts;
    extern game_feature gameplay_fix_editor_events;
    extern game_feature gameui_sidebar_info;
    extern game_feature gameui_show_intro_video;
    extern game_feature gameui_smooth_scrolling;
    extern game_feature gameui_walker_waypoints;

    custom_span<game_feature*> features();
}

enum e_config_key {
    CONFIG_RESERVED_0 = 0,
    CONFIG_RESERVED_1,
    CONFIG_RESERVED_2,
    CONFIG_RESERVED_3,
    CONFIG_RESERVED_4,
    CONFIG_RESERVED_5,
    CONFIG_RESERVED_6,
    CONFIG_UI_VISUAL_FEEDBACK_ON_DELETE,
    CONFIG_UI_SHOW_WATER_STRUCTURE_RANGE,
    CONFIG_UI_SHOW_CONSTRUCTION_SIZE,
    CONFIG_UI_ZOOM_STEPPED,
    CONFIG_UI_COMPLETE_RATING_COLUMNS,
    CONFIG_UI_HIGHLIGHT_LEGIONS,
    CONFIG_UI_ROTATE_MANUALLY,
    CONFIG_GP_CH_GRANDFESTIVAL,
    CONFIG_GP_CH_JEALOUS_GODS,
    CONFIG_GP_CH_GLOBAL_LABOUR,
    CONFIG_GP_CH_SCHOOL_WALKERS,
    CONFIG_GP_CH_RETIRE_AT_60,
    CONFIG_GP_CH_FIXED_WORKERS,
    CONFIG_GP_CH_EXTRA_FORTS,
    CONFIG_GP_CH_WOLVES_BLOCK,
    CONFIG_GP_CH_DYNAMIC_GRANARIES,
    CONFIG_GP_CH_MORE_STOCKPILE,
    CONFIG_GP_CH_NO_BUYER_DISTRIBUTION,
    CONFIG_GP_CH_IMMEDIATELY_DELETE_BUILDINGS,
    CONFIG_GP_CH_GETTING_GRANARIES_GO_OFFROAD,
    CONFIG_GP_CH_GRANARIES_GET_DOUBLE,
    CONFIG_GP_CH_TOWER_SENTRIES_GO_OFFROAD,
    CONFIG_GP_CH_FARMS_DELIVER_CLOSE,
    CONFIG_GP_CH_DELIVER_ONLY_TO_ACCEPTING_GRANARIES,
    CONFIG_GP_CH_ALL_HOUSES_MERGE,
    CONFIG_GP_CH_WINE_COUNTS_IF_OPEN_TRADE_ROUTE,
    CONFIG_GP_CH_RANDOM_COLLAPSES_TAKE_MONEY,
    CONFIG_GP_CH_MULTIPLE_BARRACKS,
    CONFIG_GP_CH_WAREHOUSES_DONT_ACCEPT,
    CONFIG_GP_CH_HOUSES_DONT_EXPAND_INTO_GARDENS,

    ///

    CONFIG_GP_FIX_IRRIGATION_RANGE,
    CONFIG_GP_FIX_FARM_PRODUCE_QUANTITY,
    CONFIG_UI_SCROLL_KEEP_INERTIA,
    CONFIG_GP_CH_WATER_CARRIER_FIREFIGHT,
    CONFIG_GP_CH_INSTANT_UNLOAD,
    CONFIG_GP_CH_UNDERSTAFFED_ACCEPT_GOODS,
    CONFIG_GP_CH_MULTIPLE_TEMPLE_COMPLEXES,
    CONFIG_GP_CH_MULTIPLE_MONUMENTS,
    CONFIG_GP_CH_SOIL_DEPLETION,
    CONFIG_GP_CH_MULTIPLE_GATHERERS,
    CONFIG_GP_CH_FIREMAN_RETUNING,
    CONFIG_UI_DRAW_FPS,
    CONFIG_GP_CH_CART_SPEED_QUANTITY,
    CONFIG_GP_CH_CITIZEN_ROAD_OFFSET,
    CONFIG_GP_CH_WORK_CAMP_ONE_WORKER_PER_MONTH,
    CONFIG_GP_CH_CLAY_PIT_FIRE_RISK_REDUCED,
    CONFIG_GP_CH_CITY_HAS_ANIMALS,
    CONFIG_GP_CH_GOLDMINE_TWICE_PRODUCTION,
    CONFIG_GP_CH_NEW_TAX_COLLECTION_SYSTEM,
    CONFIG_GP_CH_SMALL_HUT_NIT_CREATE_EMIGRANT,
    CONFIG_GP_CH_DELIVERY_BOY_GOES_TO_MARKET_ALONE,
    CONFIG_GP_CH_RELIGION_COVERAGE_INFLUENCE_SENTIMENT,
    CONFIG_GP_CH_MONUMENTS_INFLUENCE_SENTIMENT,
    CONFIG_GP_CH_WELL_RADIUS_DEPENDS_MOISTURE,
    CONFIG_GP_CH_ENTER_POINT_ON_NEAREST_TILE,

    CONFIG_GP_CH_GOD_OSIRIS_DISABLED,
    CONFIG_GP_CH_GOD_RA_DISABLED,
    CONFIG_GP_CH_GOD_PTAH_DISABLED,
    CONFIG_GP_CH_GOD_SETH_DISABLED,
    CONFIG_GP_CH_GOD_BAST_DISABLED,
    ///
    CONFIG_GP_CH_BUILDING_WOOD_CUTTER,
    CONFIG_GP_CH_RESOURCE_TIMBER,
    CONFIG_GP_CH_RESOURCE_CHICKPEAS,
    CONFIG_GP_CH_RESOURCE_POMEGRANADES,
    CONFIG_GP_CH_RESOURCE_LETTUCE,
    CONFIG_GP_CH_BUILDING_COPPER_MINE,
    CONFIG_GP_CH_RESOURCE_COPPER,

    CONFIG_GP_CH_BUILDING_REED_GATHERER,
    CONFIG_GP_CH_BUILDING_PAPYRUS_MAKER,
    CONFIG_GP_CH_BUILDING_SCRIBAL_SCHOOL,
    CONFIG_GP_CH_RESOURCE_REED,
    CONFIG_GP_CH_RESOURCE_PAPYRUS,
    
    CONFIG_GP_CH_BUILDING_SHIPYARD,
    CONFIG_GP_CH_BUILDING_FISHING_WHARF,
    CONFIG_GP_CH_RESOURCE_FISH,
    CONFIG_GP_CH_FISHING_WHARF_SPAWN_BOATS,
    CONFIG_GP_CH_FLOTSAM_ENABLED,
    CONFIG_GP_CH_BUILDING_CHICKPEAS_FARM,
    CONFIG_GP_CH_BUILDING_LETTUCE_FARM,
    CONFIG_GP_CH_BUILDING_POMEGRANATES_FARM,
    CONFIG_GP_CH_BUILDING_FIGS_FARM,
    CONFIG_GP_CH_RESOURCE_FIGS,
    CONFIG_GP_CH_BUILDING_GRAIN_FARM,
    CONFIG_GP_CH_RESOURCE_GRAIN,
    CONFIG_GP_CH_BUILDING_CATTLE_RANCH,
    CONFIG_GP_CH_RESOURCE_MEAT,
    CONFIG_GP_CH_BUILDING_BRICKS_WORKSHOP,
    CONFIG_GP_CH_RESOURCE_BRICKS,
    CONFIG_GP_CH_RESOURCE_CLAY,

    CONFIG_GP_CH_BUILDING_WORK_CAMP,
    CONFIG_GP_CH_BUILDING_GOLD_MINE,
    CONFIG_GP_CH_BUILDING_QUARRY_SANDSTONE,
    CONFIG_GP_CH_BUILDING_QUARRY_GRANITE,
    CONFIG_GP_CH_BUILDING_QUARRY_STONE,
    CONFIG_GP_CH_BUILDING_QUARRY_LIMESTONE,
    CONFIG_GP_CH_BUILDING_CLAY_PIT,
    CONFIG_GP_CH_BUILDING_WEAPONSMITH,
    CONFIG_GP_CH_COPPER_NEAR_MOUNTAINS,
    CONFIG_GP_CH_BUILDING_RECRUTER,
    CONFIG_GP_CH_RECRUITER_NOT_NEED_FORTS,
    CONFIG_UI_HIGHLIGHT_TOP_MENU_HOVER,
    CONFIG_UI_EMPIRE_CITY_OLD_NAMES,
    CONFIG_UI_DRAW_CLOUD_SHADOWS,
    CONFIG_GP_CH_BUILDING_SMALL_MASTABA,
    CONFIG_GP_CH_BUILDING_BRICKLAYERS,
    CONFIG_GP_CH_BUILDING_CLOSEST_ROAD,
    CONFIG_GP_CH_FLOODPLAIN_RANDOM_GROW,
    CONFIG_GP_CH_BUILDING_BOOTH,
    CONFIG_GP_CH_BUILDING_BANDSTAND,

    CONFIG_UI_HIDE_NEW_GAME_TOP_MENU,
    CONFIG_GP_CHANGE_SAVE_YEAR_KINGDOME_RATING,

    CONFIG_GP_CH_BUILDING_MEDIUM_MASTABA,

    CONFIG_MAX_ENTRIES
};

enum e_config_str {
    CONFIG_STRING_UI_LANGUAGE_DIR,
    CONFIG_STRING_LAST_SAVE,
    CONFIG_STRING_LAST_PLAYER,
    CONFIG_STRING_LAST_VERSION,

    CONFIG_STRING_MAX_ENTRIES
};

struct ankh_config_t {
    settings_vars_t settings;
    std::array<bool, CONFIG_MAX_ENTRIES> opts;
    std::array<xstring, CONFIG_STRING_MAX_ENTRIES> string_values;

    int get(e_config_key key);
    void set(e_config_key key, int value);

    xstring get(e_config_str key);
    void set(e_config_str key, const xstring value);
    void set(e_config_str key, pcstr value);

    void reset_defaults();

    void load();
    void save();
};

extern ankh_config_t g_ankh_config;

/**
 * Set a default config value
 * @param key Integer key
 * @return Default config value
 */
bool config_get_default_value(e_config_key key);

/**
 * Get a string default config value
 * @param key String key
 * @return Default config value, is always non-NULL but may be an empty string
 */
const char* config_get_default_string_value(e_config_key key);